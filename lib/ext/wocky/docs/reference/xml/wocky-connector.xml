<refentry id="WockyConnector">
<refmeta>
<refentrytitle role="top_of_page" id="WockyConnector.top_of_page">WockyConnector</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>WOCKY Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>WockyConnector</refname>
<refpurpose>Low-level XMPP connection generator.
<parameter>include</parameter> wocky/wocky-connector.h</refpurpose>
</refnamediv>

<refsynopsisdiv id="WockyConnector.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
enum                <link linkend="WockyConnectorError">WockyConnectorError</link>;
<link linkend="GQuark">GQuark</link>              <link linkend="wocky-connector-error-quark">wocky_connector_error_quark</link>         (void);
#define             <link linkend="WOCKY-CONNECTOR-ERROR--CAPS">WOCKY_CONNECTOR_ERROR</link>
                    <link linkend="WockyConnector-struct">WockyConnector</link>;
                    <link linkend="WockyConnectorClass">WockyConnectorClass</link>;
<link linkend="WockyXmppConnection">WockyXmppConnection</link> * <link linkend="wocky-connector-connect-finish">wocky_connector_connect_finish</link>    (<link linkend="WockyConnector">WockyConnector</link> *self,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *res,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="gchar">gchar</link> **jid,
                                                         <link linkend="gchar">gchar</link> **sid);
<link linkend="WockyXmppConnection">WockyXmppConnection</link> * <link linkend="wocky-connector-register-finish">wocky_connector_register_finish</link>   (<link linkend="WockyConnector">WockyConnector</link> *self,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *res,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="gchar">gchar</link> **jid,
                                                         <link linkend="gchar">gchar</link> **sid);
<link linkend="void">void</link>                <link linkend="wocky-connector-connect-async">wocky_connector_connect_async</link>       (<link linkend="WockyConnector">WockyConnector</link> *self,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="WockyConnector">WockyConnector</link> *    <link linkend="wocky-connector-new">wocky_connector_new</link>                 (const <link linkend="gchar">gchar</link> *jid,
                                                         const <link linkend="gchar">gchar</link> *pass,
                                                         const <link linkend="gchar">gchar</link> *resource);
<link linkend="void">void</link>                <link linkend="wocky-connector-register-async">wocky_connector_register_async</link>      (<link linkend="WockyConnector">WockyConnector</link> *self,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="wocky-connector-unregister-async">wocky_connector_unregister_async</link>    (<link linkend="WockyConnector">WockyConnector</link> *self,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            <link linkend="wocky-connector-unregister-finish">wocky_connector_unregister_finish</link>   (<link linkend="WockyConnector">WockyConnector</link> *self,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *res,
                                                         <link linkend="GError">GError</link> **error);
</synopsis>
</refsynopsisdiv>

<refsect1 id="WockyConnector.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----WockyConnector
</synopsis>
</refsect1>





<refsect1 id="WockyConnector.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="WockyConnector--email">email</link>&quot;                    <link linkend="gchar">gchar</link>*                : Read / Write
  &quot;<link linkend="WockyConnector--encrypted-plain-auth-ok">encrypted-plain-auth-ok</link>&quot;  <link linkend="gboolean">gboolean</link>              : Read / Write / Construct
  &quot;<link linkend="WockyConnector--features">features</link>&quot;                 <link linkend="WockyXmppStanza">WockyXmppStanza</link>*      : Read
  &quot;<link linkend="WockyConnector--identity">identity</link>&quot;                 <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="WockyConnector--ignore-ssl-errors">ignore-ssl-errors</link>&quot;        <link linkend="gboolean">gboolean</link>              : Read / Write / Construct
  &quot;<link linkend="WockyConnector--jid">jid</link>&quot;                      <link linkend="gchar">gchar</link>*                : Read / Write
  &quot;<link linkend="WockyConnector--legacy">legacy</link>&quot;                   <link linkend="gboolean">gboolean</link>              : Read / Write / Construct
  &quot;<link linkend="WockyConnector--old-ssl">old-ssl</link>&quot;                  <link linkend="gboolean">gboolean</link>              : Read / Write / Construct
  &quot;<link linkend="WockyConnector--password">password</link>&quot;                 <link linkend="gchar">gchar</link>*                : Read / Write
  &quot;<link linkend="WockyConnector--plaintext-auth-allowed">plaintext-auth-allowed</link>&quot;   <link linkend="gboolean">gboolean</link>              : Read / Write / Construct
  &quot;<link linkend="WockyConnector--resource">resource</link>&quot;                 <link linkend="gchar">gchar</link>*                : Read / Write / Construct Only
  &quot;<link linkend="WockyConnector--session-id">session-id</link>&quot;               <link linkend="gchar">gchar</link>*                : Read
  &quot;<link linkend="WockyConnector--tls-required">tls-required</link>&quot;             <link linkend="gboolean">gboolean</link>              : Read / Write / Construct
  &quot;<link linkend="WockyConnector--xmpp-port">xmpp-port</link>&quot;                <link linkend="guint">guint</link>                 : Read / Write / Construct
  &quot;<link linkend="WockyConnector--xmpp-server">xmpp-server</link>&quot;              <link linkend="gchar">gchar</link>*                : Read / Write
</synopsis>
</refsect1>



<refsect1 id="WockyConnector.description" role="desc">
<title role="desc.title">Description</title>
<para>
See: RFC3920 XEP-0077
</para>
<para>
Sends and receives <link linkend="WockyXmppStanzas"><type>WockyXmppStanzas</type></link> from an underlying <link linkend="GIOStream"><type>GIOStream</type></link>.
negotiating TLS if possible and completing authentication with the server
by the "most suitable" method available.
Returns a <link linkend="WockyXmppConnection"><type>WockyXmppConnection</type></link> object to the user on successful completion.
</para>
<para>
Can also be used to register or unregister an account: When unregistering
(cancelling) an account, a <link linkend="WockyXmppConnection"><type>WockyXmppConnection</type></link> is NOT returned - a <link linkend="gboolean"><type>gboolean</type></link>
value indicating success or failure is returned instead.
</para>
<para>
The WOCKY_DEBUG tag for this module is "connector".
</para>
<para>
The flow of control during connection is roughly as follows:
(registration/cancellation flows are not represented with here)
</para>
<para>
<informalexample>
 <programlisting>
tcp_srv_connected
│
├→ tcp_host_connected                       ①
│  ↓                                        ↑
└→ maybe_old_ssl                            jabber_auth_reply
   ↓                                        ↑
   xmpp_init ←─────────────┬──┐             jabber_auth_query
   ↓                       │  │             ↑
   xmpp_init_sent_cb       │  │             ├──────────────────────┐
   ↓                       │  │             │                      │
   xmpp_init_recv_cb       │  │             │ jabber_auth_try_passwd
   │ ↓                     │  │             │                      ↑
   │ xmpp_features_cb      │  │             jabber_auth_try_digest │
   │ │ │ ↓                 │  │             ↑                      │
   │ │ │ starttls_sent_cb  │  │             ├──────────────────────┘
   │ │ │ ↓                 │  │             │
   │ │ │ starttls_recv_cb ─┘  │             jabber_auth_fields
   │ │ ↓                      │             ↑
   │ │ request-auth           │             jabber_auth_init_sent
   │ │ ↓                      │             ↑
   │ │ auth_done ─────────────┴─[no sasl]─→ jabber_auth_init
   │ ↓                                      ↑
   │ iq_bind_resource                       │
   │ ↓                                      │
   │ iq_bind_resource_sent_cb               │
   │ ↓                                      │
   │ iq_bind_resource_recv_cb               │
   │ ↓                                      │
   │ ①                                      │
   └──────────[old auth]────────────────────┘

   ①
   ↓
   establish_session ─────────→ success
   ↓                              ↑
   establish_session_sent_cb      │
   ↓                              │
   establish_session_recv_cb ─────┘
 </programlisting>
</informalexample></para>
<para>
</para>
</refsect1>

<refsect1 id="WockyConnector.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="WockyConnectorError" role="enum">
<title>enum WockyConnectorError</title>
<indexterm zone="WockyConnectorError"><primary sortas="WockyConnectorError">WockyConnectorError</primary></indexterm><programlisting>typedef enum {
  WOCKY_CONNECTOR_ERROR_UNKNOWN,
  WOCKY_CONNECTOR_ERROR_IN_PROGRESS,
  WOCKY_CONNECTOR_ERROR_BAD_JID,
  WOCKY_CONNECTOR_ERROR_NON_XMPP_V1_SERVER,
  WOCKY_CONNECTOR_ERROR_BAD_FEATURES,
  WOCKY_CONNECTOR_ERROR_TLS_UNAVAILABLE,
  WOCKY_CONNECTOR_ERROR_TLS_REFUSED,
  WOCKY_CONNECTOR_ERROR_TLS_SESSION_FAILED,
  WOCKY_CONNECTOR_ERROR_BIND_UNAVAILABLE,
  WOCKY_CONNECTOR_ERROR_BIND_FAILED,
  WOCKY_CONNECTOR_ERROR_BIND_INVALID,
  WOCKY_CONNECTOR_ERROR_BIND_DENIED,
  WOCKY_CONNECTOR_ERROR_BIND_CONFLICT,
  WOCKY_CONNECTOR_ERROR_BIND_REJECTED,
  WOCKY_CONNECTOR_ERROR_SESSION_FAILED,
  WOCKY_CONNECTOR_ERROR_SESSION_DENIED,
  WOCKY_CONNECTOR_ERROR_SESSION_CONFLICT,
  WOCKY_CONNECTOR_ERROR_SESSION_REJECTED,
  WOCKY_CONNECTOR_ERROR_JABBER_AUTH_UNAVAILABLE,
  WOCKY_CONNECTOR_ERROR_JABBER_AUTH_FAILED,
  WOCKY_CONNECTOR_ERROR_JABBER_AUTH_NO_MECHS,
  WOCKY_CONNECTOR_ERROR_JABBER_AUTH_REJECTED,
  WOCKY_CONNECTOR_ERROR_JABBER_AUTH_INCOMPLETE,
  WOCKY_CONNECTOR_ERROR_INSECURE,
  WOCKY_CONNECTOR_ERROR_REGISTRATION_FAILED,
  WOCKY_CONNECTOR_ERROR_REGISTRATION_UNAVAILABLE,
  WOCKY_CONNECTOR_ERROR_REGISTRATION_UNSUPPORTED,
  WOCKY_CONNECTOR_ERROR_REGISTRATION_EMPTY,
  WOCKY_CONNECTOR_ERROR_REGISTRATION_CONFLICT,
  WOCKY_CONNECTOR_ERROR_REGISTRATION_REJECTED,
  WOCKY_CONNECTOR_ERROR_UNREGISTER_FAILED,
  WOCKY_CONNECTOR_ERROR_UNREGISTER_DENIED,
} WockyConnectorError;
</programlisting>
<para>
The <link linkend="WockyConnector"><type>WockyConnector</type></link> specific errors that can occur while connecting.</para>
<para>
</para><variablelist role="enum">
<varlistentry id="WOCKY-CONNECTOR-ERROR-UNKNOWN--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_UNKNOWN</literal></term>
<listitem><simpara> Unexpected Error Condition
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-IN-PROGRESS--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_IN_PROGRESS</literal></term>
<listitem><simpara> Connection Already Underway
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-BAD-JID--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_BAD_JID</literal></term>
<listitem><simpara> JID is Invalid
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-NON-XMPP-V1-SERVER--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_NON_XMPP_V1_SERVER</literal></term>
<listitem><simpara> XMPP Version &lt; 1
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-BAD-FEATURES--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_BAD_FEATURES</literal></term>
<listitem><simpara> Feature Stanza Invalid
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-TLS-UNAVAILABLE--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_TLS_UNAVAILABLE</literal></term>
<listitem><simpara> TLS Unavailable
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-TLS-REFUSED--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_TLS_REFUSED</literal></term>
<listitem><simpara> TLS Refused by Server
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-TLS-SESSION-FAILED--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_TLS_SESSION_FAILED</literal></term>
<listitem><simpara> TLS Handshake Failed
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-BIND-UNAVAILABLE--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_BIND_UNAVAILABLE</literal></term>
<listitem><simpara> Bind Not Available
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-BIND-FAILED--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_BIND_FAILED</literal></term>
<listitem><simpara> Bind Failed
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-BIND-INVALID--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_BIND_INVALID</literal></term>
<listitem><simpara> Bind Args Invalid
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-BIND-DENIED--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_BIND_DENIED</literal></term>
<listitem><simpara> Bind Not Allowed
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-BIND-CONFLICT--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_BIND_CONFLICT</literal></term>
<listitem><simpara> Bind Resource In Use
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-BIND-REJECTED--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_BIND_REJECTED</literal></term>
<listitem><simpara> Bind Error (Generic)
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-SESSION-FAILED--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_SESSION_FAILED</literal></term>
<listitem><simpara> Session Failed
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-SESSION-DENIED--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_SESSION_DENIED</literal></term>
<listitem><simpara> Session Refused by Server
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-SESSION-CONFLICT--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_SESSION_CONFLICT</literal></term>
<listitem><simpara> Session Not Allowed
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-SESSION-REJECTED--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_SESSION_REJECTED</literal></term>
<listitem><simpara> Session Error
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-JABBER-AUTH-UNAVAILABLE--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_JABBER_AUTH_UNAVAILABLE</literal></term>
<listitem><simpara> Jabber Auth Unavailable
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-JABBER-AUTH-FAILED--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_JABBER_AUTH_FAILED</literal></term>
<listitem><simpara> Jabber Auth Failed
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-JABBER-AUTH-NO-MECHS--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_JABBER_AUTH_NO_MECHS</literal></term>
<listitem><simpara> Jabber Auth - No Mechanisms
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-JABBER-AUTH-REJECTED--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_JABBER_AUTH_REJECTED</literal></term>
<listitem><simpara> Jabber Auth - Unauthorised
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-JABBER-AUTH-INCOMPLETE--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_JABBER_AUTH_INCOMPLETE</literal></term>
<listitem><simpara> Jabber Auth Args Incomplete
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-INSECURE--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_INSECURE</literal></term>
<listitem><simpara> Insufficent Security for Requested Operation
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-REGISTRATION-FAILED--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_REGISTRATION_FAILED</literal></term>
<listitem><simpara> Account Registration Error
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-REGISTRATION-UNAVAILABLE--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_REGISTRATION_UNAVAILABLE</literal></term>
<listitem><simpara> Account Registration Not Available
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-REGISTRATION-UNSUPPORTED--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_REGISTRATION_UNSUPPORTED</literal></term>
<listitem><simpara> Account Registration Not Implemented
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-REGISTRATION-EMPTY--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_REGISTRATION_EMPTY</literal></term>
<listitem><simpara> Account Registration Makes No Sense
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-REGISTRATION-CONFLICT--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_REGISTRATION_CONFLICT</literal></term>
<listitem><simpara> Account Already Registered
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-REGISTRATION-REJECTED--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_REGISTRATION_REJECTED</literal></term>
<listitem><simpara> Account Registration Rejected
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-UNREGISTER-FAILED--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_UNREGISTER_FAILED</literal></term>
<listitem><simpara> Account Cancellation Failed
</simpara></listitem>
</varlistentry>
<varlistentry id="WOCKY-CONNECTOR-ERROR-UNREGISTER-DENIED--CAPS" role="constant">
<term><literal>WOCKY_CONNECTOR_ERROR_UNREGISTER_DENIED</literal></term>
<listitem><simpara> Account Cancellation Refused
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="wocky-connector-error-quark" role="function">
<title>wocky_connector_error_quark ()</title>
<indexterm zone="wocky-connector-error-quark"><primary sortas="wocky_connector_error_quark">wocky_connector_error_quark</primary></indexterm><programlisting><link linkend="GQuark">GQuark</link>              wocky_connector_error_quark         (void);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="WOCKY-CONNECTOR-ERROR--CAPS" role="macro">
<title>WOCKY_CONNECTOR_ERROR</title>
<indexterm zone="WOCKY-CONNECTOR-ERROR--CAPS"><primary sortas="WOCKY_CONNECTOR_ERROR">WOCKY_CONNECTOR_ERROR</primary></indexterm><programlisting>#define WOCKY_CONNECTOR_ERROR (wocky_connector_error_quark ())
</programlisting>
<para>
Get access to the error quark of the connector.</para>
<para>
</para></refsect2>
<refsect2 id="WockyConnector-struct" role="struct">
<title>WockyConnector</title>
<indexterm zone="WockyConnector-struct"><primary sortas="WockyConnector">WockyConnector</primary></indexterm><programlisting>typedef struct _WockyConnector WockyConnector;</programlisting>
<para>
</para></refsect2>
<refsect2 id="WockyConnectorClass" role="struct">
<title>WockyConnectorClass</title>
<indexterm zone="WockyConnectorClass"><primary sortas="WockyConnectorClass">WockyConnectorClass</primary></indexterm><programlisting>typedef struct {
    GObjectClass parent_class;
} WockyConnectorClass;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="wocky-connector-connect-finish" role="function">
<title>wocky_connector_connect_finish ()</title>
<indexterm zone="wocky-connector-connect-finish"><primary sortas="wocky_connector_connect_finish">wocky_connector_connect_finish</primary></indexterm><programlisting><link linkend="WockyXmppConnection">WockyXmppConnection</link> * wocky_connector_connect_finish    (<link linkend="WockyConnector">WockyConnector</link> *self,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *res,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="gchar">gchar</link> **jid,
                                                         <link linkend="gchar">gchar</link> **sid);</programlisting>
<para>
Called by the callback passed to <link linkend="wocky-connector-connect-async"><function>wocky_connector_connect_async()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WockyConnector"><type>WockyConnector</type></link> instance.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncResult"><type>GAsyncResult</type></link> (from your <link linkend="wocky-connector-connect-async"><function>wocky_connector_connect_async()</function></link> callback).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> (<link linkend="NULL--CAPS"><literal>NULL</literal></link> to ignore) the <link linkend="GError"><type>GError</type></link> (if any) is sored here.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>jid</parameter>&#160;:</term>
<listitem><simpara> the user JID from the server is stored here.. <acronym>%NULL to</acronym> ignore. </simpara></listitem></varlistentry>
<varlistentry><term><parameter>sid</parameter>&#160;:</term>
<listitem><simpara> the Session ID is stored here.. <acronym>%NULL to</acronym> ignore. </simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="WockyXmppConnection"><type>WockyXmppConnection</type></link> instance (success), or <link linkend="NULL--CAPS"><literal>NULL</literal></link> (failure).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="wocky-connector-register-finish" role="function">
<title>wocky_connector_register_finish ()</title>
<indexterm zone="wocky-connector-register-finish"><primary sortas="wocky_connector_register_finish">wocky_connector_register_finish</primary></indexterm><programlisting><link linkend="WockyXmppConnection">WockyXmppConnection</link> * wocky_connector_register_finish   (<link linkend="WockyConnector">WockyConnector</link> *self,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *res,
                                                         <link linkend="GError">GError</link> **error,
                                                         <link linkend="gchar">gchar</link> **jid,
                                                         <link linkend="gchar">gchar</link> **sid);</programlisting>
<para>
Called by the callback passed to <link linkend="wocky-connector-register-async"><function>wocky_connector_register_async()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WockyConnector"><type>WockyConnector</type></link> instance.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncResult"><type>GAsyncResult</type></link> (from your <link linkend="wocky-connector-register-async"><function>wocky_connector_register_async()</function></link> callback).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> (<link linkend="NULL--CAPS"><literal>NULL</literal></link> to ignore) the <link linkend="GError"><type>GError</type></link> (if any) is stored here.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>jid</parameter>&#160;:</term>
<listitem><simpara> (<link linkend="NULL--CAPS"><literal>NULL</literal></link> to ignore) the JID in effect after connection is stored here.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sid</parameter>&#160;:</term>
<listitem><simpara> (<link linkend="NULL--CAPS"><literal>NULL</literal></link> to ignore) the Session ID after connection is stored here.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="WockyXmppConnection"><type>WockyXmppConnection</type></link> instance (success), or <link linkend="NULL--CAPS"><literal>NULL</literal></link> (failure).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="wocky-connector-connect-async" role="function">
<title>wocky_connector_connect_async ()</title>
<indexterm zone="wocky-connector-connect-async"><primary sortas="wocky_connector_connect_async">wocky_connector_connect_async</primary></indexterm><programlisting><link linkend="void">void</link>                wocky_connector_connect_async       (<link linkend="WockyConnector">WockyConnector</link> *self,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Connect to the account/server specified by the <parameter>self</parameter>.
<parameter>cb</parameter> should invoke <link linkend="wocky-connector-connect-finish"><function>wocky_connector_connect_finish()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WockyConnector"><type>WockyConnector</type></link> instance.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call when the operation completes.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="gpointer"><type>gpointer</type></link> to pass to the callback.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="wocky-connector-new" role="function">
<title>wocky_connector_new ()</title>
<indexterm zone="wocky-connector-new"><primary sortas="wocky_connector_new">wocky_connector_new</primary></indexterm><programlisting><link linkend="WockyConnector">WockyConnector</link> *    wocky_connector_new                 (const <link linkend="gchar">gchar</link> *jid,
                                                         const <link linkend="gchar">gchar</link> *pass,
                                                         const <link linkend="gchar">gchar</link> *resource);</programlisting>
<para>
Connect to the account/server specified by <parameter>self</parameter>.
To set other <link linkend="WockyConnector"><type>WockyConnector</type></link> properties, use <link linkend="g-object-new"><function>g_object_new()</function></link> instead.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>jid</parameter>&#160;:</term>
<listitem><simpara> a JID (user AT domain).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>pass</parameter>&#160;:</term>
<listitem><simpara> the password.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>resource</parameter>&#160;:</term>
<listitem><simpara> the resource (sans '/'), or NULL to autogenerate one.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="WockyConnector"><type>WockyConnector</type></link> instance which can be used to connect to,
register or cancel an account
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="wocky-connector-register-async" role="function">
<title>wocky_connector_register_async ()</title>
<indexterm zone="wocky-connector-register-async"><primary sortas="wocky_connector_register_async">wocky_connector_register_async</primary></indexterm><programlisting><link linkend="void">void</link>                wocky_connector_register_async      (<link linkend="WockyConnector">WockyConnector</link> *self,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Connect to the account/server specified by <parameter>self</parameter>, register (set up)
the account there and then log in to it.
<parameter>cb</parameter> should invoke <link linkend="wocky-connector-register-finish"><function>wocky_connector_register_finish()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WockyConnector"><type>WockyConnector</type></link> instance.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call when the operation completes.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="gpointer"><type>gpointer</type></link> to pass to the callback <parameter>cb</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="wocky-connector-unregister-async" role="function">
<title>wocky_connector_unregister_async ()</title>
<indexterm zone="wocky-connector-unregister-async"><primary sortas="wocky_connector_unregister_async">wocky_connector_unregister_async</primary></indexterm><programlisting><link linkend="void">void</link>                wocky_connector_unregister_async    (<link linkend="WockyConnector">WockyConnector</link> *self,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> cb,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Connect to the account/server specified by <parameter>self</parameter>, and unregister (cancel)
the account there.
<parameter>cb</parameter> should invoke <link linkend="wocky-connector-unregister-finish"><function>wocky_connector_unregister_finish()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WockyConnector"><type>WockyConnector</type></link> instance.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>cb</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncReadyCallback"><type>GAsyncReadyCallback</type></link> to call when the operation completes.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="gpointer"><type>gpointer</type></link> to pass to the callback <parameter>cb</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="wocky-connector-unregister-finish" role="function">
<title>wocky_connector_unregister_finish ()</title>
<indexterm zone="wocky-connector-unregister-finish"><primary sortas="wocky_connector_unregister_finish">wocky_connector_unregister_finish</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            wocky_connector_unregister_finish   (<link linkend="WockyConnector">WockyConnector</link> *self,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *res,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Called by the callback passed to <link linkend="wocky-connector-unregister-async"><function>wocky_connector_unregister_async()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>self</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="WockyConnector"><type>WockyConnector</type></link> instance.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> a <link linkend="GAsyncResult"><type>GAsyncResult</type></link> (from the <link linkend="wocky-connector-unregister-async"><function>wocky_connector_unregister_async()</function></link> callback).
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> (<link linkend="NULL--CAPS"><literal>NULL</literal></link> to ignore) the <link linkend="GError"><type>GError</type></link> (if any) is stored here.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> a <link linkend="gboolean"><type>gboolean</type></link> value <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> (success), or <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> (failure).
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="WockyConnector.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="WockyConnector--email" role="property"><title>The <literal>&quot;email&quot;</literal> property</title>
<indexterm zone="WockyConnector--email"><primary sortas="WockyConnector:email">WockyConnector:email</primary></indexterm><programlisting>  &quot;email&quot;                    <link linkend="gchar">gchar</link>*                : Read / Write</programlisting>
<para>
The XMPP account's email address (optional, MAY be required by the server
if we are registering an account, not required otherwise).</para>
<para>
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="WockyConnector--encrypted-plain-auth-ok" role="property"><title>The <literal>&quot;encrypted-plain-auth-ok&quot;</literal> property</title>
<indexterm zone="WockyConnector--encrypted-plain-auth-ok"><primary sortas="WockyConnector:encrypted-plain-auth-ok">WockyConnector:encrypted-plain-auth-ok</primary></indexterm><programlisting>  &quot;encrypted-plain-auth-ok&quot;  <link linkend="gboolean">gboolean</link>              : Read / Write / Construct</programlisting>
<para>
Whether PLAINTEXT auth is ok when encrypted.</para>
<para>
</para><para>Default value: TRUE</para>
</refsect2>
<refsect2 id="WockyConnector--features" role="property"><title>The <literal>&quot;features&quot;</literal> property</title>
<indexterm zone="WockyConnector--features"><primary sortas="WockyConnector:features">WockyConnector:features</primary></indexterm><programlisting>  &quot;features&quot;                 <link linkend="WockyXmppStanza">WockyXmppStanza</link>*      : Read</programlisting>
<para>
A <link linkend="WockyXmppStanza"><type>WockyXmppStanza</type></link> instance, the last WockyXmppStanza instance received
by the connector during the connection procedure (there may be several,
the most recent one always being the one we should refer to).</para>
<para>
</para></refsect2>
<refsect2 id="WockyConnector--identity" role="property"><title>The <literal>&quot;identity&quot;</literal> property</title>
<indexterm zone="WockyConnector--identity"><primary sortas="WockyConnector:identity">WockyConnector:identity</primary></indexterm><programlisting>  &quot;identity&quot;                 <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>
JID + resource (a AT b SLASH c) that is in effect _after_ a successful
resource binding operation. This is NOT guaranteed to be related to
the JID specified in the original <link linkend="WockyConnector--jid"><type>"jid"</type></link> property.
The resource, in particular, is often different, and with gtalk the
domain is often different.</para>
<para>
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="WockyConnector--ignore-ssl-errors" role="property"><title>The <literal>&quot;ignore-ssl-errors&quot;</literal> property</title>
<indexterm zone="WockyConnector--ignore-ssl-errors"><primary sortas="WockyConnector:ignore-ssl-errors">WockyConnector:ignore-ssl-errors</primary></indexterm><programlisting>  &quot;ignore-ssl-errors&quot;        <link linkend="gboolean">gboolean</link>              : Read / Write / Construct</programlisting>
<para>
Whether to ignore recoverable SSL errors.
(certificate insecurity/expiry etc) - not actually implemented yet.</para>
<para>
</para><para>Default value: TRUE</para>
</refsect2>
<refsect2 id="WockyConnector--jid" role="property"><title>The <literal>&quot;jid&quot;</literal> property</title>
<indexterm zone="WockyConnector--jid"><primary sortas="WockyConnector:jid">WockyConnector:jid</primary></indexterm><programlisting>  &quot;jid&quot;                      <link linkend="gchar">gchar</link>*                : Read / Write</programlisting>
<para>
The XMPP account's JID (with or without a /resource).</para>
<para>
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="WockyConnector--legacy" role="property"><title>The <literal>&quot;legacy&quot;</literal> property</title>
<indexterm zone="WockyConnector--legacy"><primary sortas="WockyConnector:legacy">WockyConnector:legacy</primary></indexterm><programlisting>  &quot;legacy&quot;                   <link linkend="gboolean">gboolean</link>              : Read / Write / Construct</programlisting>
<para>
Whether to attempt old-style (non-SASL) jabber auth.</para>
<para>
</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="WockyConnector--old-ssl" role="property"><title>The <literal>&quot;old-ssl&quot;</literal> property</title>
<indexterm zone="WockyConnector--old-ssl"><primary sortas="WockyConnector:old-ssl">WockyConnector:old-ssl</primary></indexterm><programlisting>  &quot;old-ssl&quot;                  <link linkend="gboolean">gboolean</link>              : Read / Write / Construct</programlisting>
<para>
The Session ID supplied by the server upon successfully connecting.
May be useful later on as some XEPs suggest this value should be used
at various stages as part of a hash or as an ID.</para>
<para>
</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="WockyConnector--password" role="property"><title>The <literal>&quot;password&quot;</literal> property</title>
<indexterm zone="WockyConnector--password"><primary sortas="WockyConnector:password">WockyConnector:password</primary></indexterm><programlisting>  &quot;password&quot;                 <link linkend="gchar">gchar</link>*                : Read / Write</programlisting>
<para>
XMPP Account password.</para>
<para>
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="WockyConnector--plaintext-auth-allowed" role="property"><title>The <literal>&quot;plaintext-auth-allowed&quot;</literal> property</title>
<indexterm zone="WockyConnector--plaintext-auth-allowed"><primary sortas="WockyConnector:plaintext-auth-allowed">WockyConnector:plaintext-auth-allowed</primary></indexterm><programlisting>  &quot;plaintext-auth-allowed&quot;   <link linkend="gboolean">gboolean</link>              : Read / Write / Construct</programlisting>
<para>
Whether auth info can be sent in the clear (eg PLAINTEXT auth).
This is independent of any encryption (TLS, SSL) that has been negotiated.</para>
<para>
</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="WockyConnector--resource" role="property"><title>The <literal>&quot;resource&quot;</literal> property</title>
<indexterm zone="WockyConnector--resource"><primary sortas="WockyConnector:resource">WockyConnector:resource</primary></indexterm><programlisting>  &quot;resource&quot;                 <link linkend="gchar">gchar</link>*                : Read / Write / Construct Only</programlisting>
<para>
The resource (sans '/') for this connection. Will be generated
automatically if not set. May be altered by the server anyway
upon successful binding.</para>
<para>
</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="WockyConnector--session-id" role="property"><title>The <literal>&quot;session-id&quot;</literal> property</title>
<indexterm zone="WockyConnector--session-id"><primary sortas="WockyConnector:session-id">WockyConnector:session-id</primary></indexterm><programlisting>  &quot;session-id&quot;               <link linkend="gchar">gchar</link>*                : Read</programlisting>
<para>XMPP Session ID.</para><para>Default value: NULL</para>
</refsect2>
<refsect2 id="WockyConnector--tls-required" role="property"><title>The <literal>&quot;tls-required&quot;</literal> property</title>
<indexterm zone="WockyConnector--tls-required"><primary sortas="WockyConnector:tls-required">WockyConnector:tls-required</primary></indexterm><programlisting>  &quot;tls-required&quot;             <link linkend="gboolean">gboolean</link>              : Read / Write / Construct</programlisting>
<para>
Whether we require successful tls/ssl negotiation to continue.</para>
<para>
</para><para>Default value: TRUE</para>
</refsect2>
<refsect2 id="WockyConnector--xmpp-port" role="property"><title>The <literal>&quot;xmpp-port&quot;</literal> property</title>
<indexterm zone="WockyConnector--xmpp-port"><primary sortas="WockyConnector:xmpp-port">WockyConnector:xmpp-port</primary></indexterm><programlisting>  &quot;xmpp-port&quot;                <link linkend="guint">guint</link>                 : Read / Write / Construct</programlisting>
<para>
Optional XMPP connect port. Any DNS SRV record will be ignored if
this is set. (So the host will be either the WockyConnector:xmpp-server
property or the domain part of the JID, in descending order of preference)</para>
<para>
</para><para>Allowed values: &lt;= 65535</para>
<para>Default value: 0</para>
</refsect2>
<refsect2 id="WockyConnector--xmpp-server" role="property"><title>The <literal>&quot;xmpp-server&quot;</literal> property</title>
<indexterm zone="WockyConnector--xmpp-server"><primary sortas="WockyConnector:xmpp-server">WockyConnector:xmpp-server</primary></indexterm><programlisting>  &quot;xmpp-server&quot;              <link linkend="gchar">gchar</link>*                : Read / Write</programlisting>
<para>
Optional XMPP connect server. Any DNS SRV record and the host specified
in <link linkend="WockyConnector--jid"><type>"jid"</type></link> will be ignored if this is set. May be a hostname
(fully qualified or otherwise), a dotted quad or an ipv6 address.</para>
<para>
</para><para>Default value: NULL</para>
</refsect2>
</refsect1>




</refentry>
